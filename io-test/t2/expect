import { hmrload } from "@bluejsx/vite-plugin-blue-hmr";import { FuncCompParam, getRefs } from "bluejsx"
import CodeSpace from "../CodeSpace"
import * as monaco from 'monaco-editor'
import { codeOptions as CLASS_CODE_OPTIONS } from './index.module.scss'

export default function(_bjsx_comp_attr){let { code } = _bjsx_comp_attr;
  const refs = getRefs()
  let self = Blue.r(CodeSpace, null, /* @__PURE__ */ Blue.r("label", {
    for: "code-options"
  }, " Coding style: "), /* @__PURE__ */ Blue.r("select", {
    id: "code-options",
    class: CLASS_CODE_OPTIONS,
    ref: [refs, "codeSelector"]
  }, /* @__PURE__ */ Blue.r("option", {
    value: "0"
  }, "JSX"), /* @__PURE__ */ Blue.r("option", {
    value: "1"
  }, "JSX with ref attribute"), /* @__PURE__ */ Blue.r("option", {
    value: "2"
  }, "JSX with AttrHolder"), /* @__PURE__ */ Blue.r("option", {
    value: "3"
  }, "TSX"), /* @__PURE__ */ Blue.r("option", {
    value: "4"
  }, "TSX with ref attribute"), /* @__PURE__ */ Blue.r("option", {
    value: "5"
  }, "TSX with AttrHolder"), /* @__PURE__ */ Blue.r("option", {
    value: "6"
  }, "TSX + SVG Animation"), /* @__PURE__ */ Blue.r("option", {
    value: "7"
  }, "Playing Around")));
    /* <CodeSpace>
    <label for='code-options'> Coding style: </label>
    <select id='code-options' class={CLASS_CODE_OPTIONS} ref={[refs, 'codeSelector']}>
      <option value='0'>JSX</option>
      <option value='1'>JSX with ref attribute</option>
      <option value='2'>JSX with AttrHolder</option>
      <option value='3'>TSX</option>
      <option value='4'>TSX with ref attribute</option>
      <option value='5'>TSX with AttrHolder</option>
      <option value='6'>TSX + SVG Animation</option>
      <option value='7'>Playing Around</option>
    </select>
  </CodeSpace> as ReturnType<typeof CodeSpace> */
  const { codeSelector } = refs
  const JSXURI = monaco.Uri.parse('file:///main.jsx'), TSXURI = monaco.Uri.parse('file:///main.tsx'),
    JSXModel = monaco.editor.getModel(JSXURI) || monaco.editor.createModel(null, 'typescript', JSXURI),
    TSXModel = monaco.editor.getModel(TSXURI) || monaco.editor.createModel(null, 'typescript', TSXURI)
  const onscroll = () => {
    const { unko } = self.__newestElem
    const { top } = self.__newestElem.getBoundingClientRect()
    if (top < 500 && top > 0) {
      self.__newestElem.init().then(()=>applyCode(code, JSXModel))
      //self.__newestElem.scrollIntoView({ behavior: 'smooth' })
      document.scrollingElement.scrollTo({
        top: self.__newestElem.offsetTop - 100,
        left: 0,
        behavior: 'smooth'
      })
      document.removeEventListener('scroll', onscroll)
    }
  }
  document.addEventListener('scroll', onscroll)

  const applyCode = (code, model) => {
    self.__newestElem.editor.setModel(model)
    self.__newestElem.editor.setValue(code)
    self.__newestElem.runCode()
  }
  codeSelector.onchange = async () => {
    switch (codeSelector.value) {
      case '0':
        import('../../examples/JSXDefault?raw').then(({ default: code }) => applyCode(code, JSXModel))
        break;
      case '1':
        import('../../examples/JSXWithRef?raw').then(({ default: code }) => applyCode(code, JSXModel))
        break;
      case '2':
        import('../../examples/JSXAttrHolder?raw').then(({ default: code }) => applyCode(code, JSXModel))
        break;
      case '3':
        import('../../examples/TSXDeault?raw').then(({ default: code }) => applyCode(code, TSXModel))
        break;
      case '4':
        import('../../examples/TSXWithRef?raw').then(({ default: code }) => applyCode(code, TSXModel))
        break;
      case '5':
        import('../../examples/TSXAttrHolder?raw').then(({ default: code }) => applyCode(code, TSXModel))
        break;
      case '6':
        import('../../examples/TSX_SVG_Anim?raw').then(({ default: code }) => applyCode(code, TSXModel))
        break;
      case '7':
        import('../../examples/justPlayAround01?raw').then(({ default: code }) => applyCode(code, TSXModel))
        break;
      default:
        break;
    }
  }
  //-----------------------------
if(import.meta.hot){
  const p_handler = hmrload(self);
  import.meta.hot.accept((mod)=>{
    if(!self.__canUpdate) import.meta.hot.decline()
    const newElem = Blue.r(mod.default, _bjsx_comp_attr, _bjsx_comp_attr.children)
    try{
      //---------------
      newElem.__mod_props = self.__mod_props;
      for(const [key, value] of newElem.__mod_props.entries()){
        newElem[key] = value
      }

      newElem.__func_call = self.__func_call
      for(const [key, value] of newElem.__func_call.entries()){
        newElem[key](...value)
      }

      //---------------
    } catch(_){
      import.meta.hot.decline()
    }
    self.__newestElem = new Proxy(newElem, p_handler)
    self.before(newElem)
    self.remove()
  })
}
self.__canUpdate = false
return self
}